Ecommerce Project:
Admin Module:

Secure Administrative Access: Administrators can securely log in, generate tokens, and access authenticated APIs, leveraging our robust JWT-based authentication and authorization system.

Category Management: Effortlessly post and retrieve product categories with seamless administrative control.

Efficient Product Management: Administrators can efficiently post, update, and delete products, ensuring a streamlined product management process.

Order Oversight: Maintain a vigilant eye on placed orders and effortlessly manage order status updates (shipped, delivered, in progress).

Advanced Analytics: Dive into detailed analytics via our dedicated analytics page, providing insights into placed, shipped, and in-progress orders. Additionally, view sales data for the current and previous months.

FAQs and Coupons: Admins can disseminate valuable product information through FAQs and extend discounts via our coupon management system.

Customer Module:

Secure Customer Access: Customers can securely log in, generate tokens, and access authenticated APIs through our robust JWT-based authentication and authorization system.

Product Discovery: Explore our extensive product selection conveniently displayed in the dashboard.

Efficient Shopping: Seamlessly add single or multiple products to your cart for a smooth shopping experience.

Simplified Ordering: Effortlessly place orders after adding products to your cart and enjoy discounts by applying coupons using coupon IDs.

Share Your Feedback: Customers can post reviews for delivered products, facilitating informed decision-making for others.

Wishlist: Create a personalized wishlist by adding products you love.

Product Insights: Obtain comprehensive details about specific products, including product details, reviews, and FAQs, with a simple click on the product name.

User Profile Management: Easily update user profiles and change passwords for enhanced user control.

Order Tracking: Conveniently track your orders using tracking IDs, even if you're not logged in.

Admin Credentials:
mail: admin@test.com
pwd: admin

User Credentials
user@test.com
user

Git
show modified files: 
git show --stat

add modified files to commit
git add .

commit 
git commit -m "<message>"

push 
git push

1.Goto Spring.io
create ecom project and import to eclipse/STS/Intellij
<artifactId> ecom 
<groupId>com.project</groupId>
<version>0.0.1-SNAPSHOT</version>
<name>ecom</name>
<description>Ecommerce Website Project</description>

Dependencies:
 spring-boot-starter-data-jpa 
 spring-boot-starter-security 
 spring-boot-starter-web 
 mysql-connector-j 
 lombok 
spring-security-test
spring-boot-starter-validation
hibernate-validator

For JWT dependencies

jjwt-api
jjwt-impl
jwt-jackson


2.Create DB ecom_project

3.create Angular Project EcommerceApp

Creating JWT Util and JWT request Filter

git
git pull origin main


Create Login, sign-up component and add the routing in routing.ts

Created JWTrequestFilter.java
UserRepository.java,  UserDetailsServiceImpl.java
JwtUtil.java, 

Creating Login Page API call and storage service Angular

create UserStorage ts file
ng g s UserStorage

In UserStorageService create saveToken() method
 in this method we remove token in local storage if any existing
 
In UserStorageService create saveUser() method
 in this method we remove user in local storage if any existing\
 
LoginPage:
change login page in vsCode

created login Page and set token and user is session storage

Branch2: 
Creating Role based nav-bars and storage service in angular

Creating category entity, product entity & post category Rest API 

Creating Post Category page & Get all categories REST API 

Created PostCategory component

(add ctaegory was not working)
for temporary fix
In WebSecurityConfiguration
 I have removed (.authenticated) and replaced with(permitAll()) in securityFilterChain() method 
 
 .requestMatchers("/api/**")
 .permitAll()

31-03-2024

created getCategory api 

NextStep:
06-04-2024
Creating post Product API, Get All Products API with DTO

Create ProductDTO and use it in Product APIs

created AdminProductContoller, ProductDto, Product, 
ProductRepository, AdminProductService, AdminProductServiceImpl

NextStep:
creating post ProductPage, with Image preview & Category Section from dropdown 